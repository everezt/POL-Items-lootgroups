using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pol_Items_lootgroups.Classes
{
    static class Parser
    {
        public static bool isLineUsed(string line)
        {
            if (!string.IsNullOrWhiteSpace(line))
            {
                if (line.Contains("#") || line.Contains("//"))
                {
                    // line is specified as unused
                    return false;
                }
                else
                {
                    // this line is actually used...
                    return true;
                }
            }
            else
            {
                // empty line
                return false;
            }
        }

        public static string[] parseLineElements(string line)
        {
            return line.Split(new string[] { "\n", "\r\n", " ", "\t" }, StringSplitOptions.RemoveEmptyEntries);
        }

        public static string[] parseGroups(string fileText)
        {
            return fileText.Split(new string[] { "}" }, StringSplitOptions.RemoveEmptyEntries);
        }

        public static string[] parseToLines(string fileText)
        {
            return fileText.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
        }

        public static string exportItemGroups(List<ItemGroup> itemGroups)
        {
            string output = "// File generated by Pol-Item-lootgroups tool\r\n\r\n\r\n";
            foreach (var group in itemGroups)
            {
                output += "group " + group.Name + "\r\n";
                output += "{\r\n";
                foreach (var item in group.Items)
                {
                    output += "\tItem\t" + item + "\r\n";
                }
                output += "}\r\n\r\n";
            }
            return output;
        }

        public static bool checkParams(string[] elements, int paramCount)
        {
            int goodParam = paramCount + 1;

            if(elements.Count() >= goodParam)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
